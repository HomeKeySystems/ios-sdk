# Change Log
All notable changes to this project will be documented in this file.
This project adheres to [Semantic Versioning](http://semver.org/).

### 3.3.1

# Added:

Support for new templates for scanning from curved surfaces, improved performance in difficult lighting (shadows/reflections).
Bitcode support, code corners exposed, performance parameters.

### 3.2.0

# Fixed:
- Crash & Dot Color support

### 3.0.0

# Added:
- Support for multiple dot colors

# Changed:
- Updated OpenCV (3.4)
- Updated crypto modules
- Custom Blueprints now loadable via parameter

# Fixed:
- Much better performance in low-contrast situations

### 1.2.2
# Added:
- Swift 4 support

### 1.2.1
# Fixed:
- Xcode 9 support.

### 1.2.0
# Added:
- New templates
- Join parameter options in skin object (bitmasks)

### 1.1.1
# Changed:
- ScanView now has a cooldown after detecting a scannable.

### 1.1.0
# Added:
- Swift 3.1 support
- Scannables with mapped data on the Quikkly back-end

### 1.0.1
# Fixed:
- Crash on app launch when user denies camera permission
- Some layout issues on small screens

# Added:
- Default camera permission denied hint on ScanView
- ScanViewDelegate function to override default 'permission denied' view with a custom one


### 1.0.0
Initial version of the Quikkly scannables SDK.
It's the easiest way to get smart codes into your app. 
- Generate scannables in a variety of shapes and patterns.
- Detect scannables and link to any action.
- Swift 3 or Objective-C
- Integration is a piece of cake. And who doesn't like cake?
